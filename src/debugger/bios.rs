use rustation::cpu::Cpu;
use rustation::memory::map::mask_region;

/// Called every time the PC changes when BIOS call logging is
/// enabled
pub fn check_bios_call(cpu: &Cpu) {
    let pc = mask_region(cpu.pc());

    if BIOS_VECTOR_ADDR.contains(&pc) {
        // We're in a BIOS vector call
        let vector = pc;
        // $t1 contains the function number
        let func = cpu.regs()[9];

        let &(name, param_handlers) = match vector {
            0xb0 => BIOS_VECTOR_B.get(func as usize),
            _ => None
        }.unwrap_or(&("unknown", &[]));

        let mut params = String::new();
        let mut first = true;

        for (i, ph) in param_handlers.iter().enumerate() {
            // XXX handle stack parameters when needed
            assert!(i <= 3);

            if first {
                first = false;
            } else {
                params.push_str(", ");
            }

            let reg = cpu.regs()[4 + i];

            params.push_str(&ph(cpu, reg));
        }

        debug!("BIOS call 0x{:02x}[0x{:02x}]: {}({})", vector, func, name, params);
    }
}

/// The addresses of the three BIOS vectors. In order to call a BIOS
/// function the game sets the function number in R9 before jumping to
/// the function's vector.
const BIOS_VECTOR_ADDR: [u32; 3] = [0xa0, 0xb0, 0xc0];

type ParamHandler = fn (&Cpu, reg: u32) -> String;

fn param_char(_cpu: &Cpu, reg: u32) -> String {
    format!("'{}'", reg as u8 as char)
}

/// BIOS vector B functions, lifted from No$
static BIOS_VECTOR_B: [(&'static str, &'static [ParamHandler]); 0x100] = [
    ("alloc_kernel_memory", &[]),
    ("free_kernel_memory", &[]),
    ("init_timer", &[]),
    ("get_timer", &[]),
    ("enable_timer_irq", &[]),
    ("disable_timer_irq", &[]),
    ("restart_timer", &[]),
    ("DeliverEvent", &[]),
    ("OpenEvent", &[]),
    ("CloseEvent", &[]),
    ("WaitEvent", &[]),
    ("TestEvent", &[]),
    ("EnableEvent", &[]),
    ("DisableEvent", &[]),
    ("OpenThread", &[]),
    ("CloseThread", &[]),
    ("ChangeThread", &[]),
    ("unknown", &[]),
    ("InitPad", &[]),
    ("StartPad", &[]),
    ("StopPad", &[]),
    ("OutdatedPadInitAndStart", &[]),
    ("OutdatedPadGetButtons", &[]),
    ("ReturnFromException", &[]),
    ("SetDefaultExitFromException", &[]),
    ("SetCustomExitFromException", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("UnDeliverEvent", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("FileOpen", &[]),
    ("FileSeek", &[]),
    ("FileRead", &[]),
    ("FileWrite", &[]),
    ("FileClose", &[]),
    ("FileIoctl", &[]),
    ("exit", &[]),
    ("FileGetDeviceFlag", &[]),
    ("FileGetc", &[]),
    ("FilePutc", &[]),
    ("std_in_getchar", &[]),
    ("std_out_putchar", &[param_char]),
    ("std_in_gets", &[]),
    ("std_out_puts", &[]),
    ("chdir", &[]),
    ("FormatDevice", &[]),
    ("firstfile", &[]),
    ("nextfile", &[]),
    ("FileRename", &[]),
    ("FileDelete", &[]),
    ("FileUndelete", &[]),
    ("AddDevice", &[]),
    ("RemoveDevice", &[]),
    ("PrintInstalledDevices", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
    ("unknown", &[]),
];
